// +build !ignore_autogenerated

/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright(c) 2019 Wind River Systems, Inc. */
// Code generated by main. DO NOT EDIT.

package v1

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AddressInfo) DeepEqual(other *AddressInfo) bool {
	if other == nil {
		return false
	}

	if in.Interface != other.Interface {
		return false
	}
	if in.Address != other.Address {
		return false
	}
	if in.Prefix != other.Prefix {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AddressList) DeepEqual(other *AddressList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AllocationInfo) DeepEqual(other *AllocationInfo) bool {
	if other == nil {
		return false
	}

	if ((in.Ranges != nil) && (other.Ranges != nil)) || ((in.Ranges == nil) != (other.Ranges == nil)) {
		in, other := &in.Ranges, &other.Ranges
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	if in.Type != other.Type {
		return false
	}
	if (in.Order == nil) != (other.Order == nil) {
		return false
	} else if in.Order != nil {
		if *in.Order != *other.Order {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AllocationRange) DeepEqual(other *AllocationRange) bool {
	if other == nil {
		return false
	}

	if in.Start != other.Start {
		return false
	}
	if in.End != other.End {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *BMCredentials) DeepEqual(other *BMCredentials) bool {
	if other == nil {
		return false
	}

	if in.Password != nil {
		if (in.Password == nil) != (other.Password == nil) {
			return false
		} else if in.Password != nil {
			if !in.Password.DeepEqual(other.Password) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *BMInfo) DeepEqual(other *BMInfo) bool {
	if other == nil {
		return false
	}

	if in.Type != nil {
		if (in.Type == nil) != (other.Type == nil) {
			return false
		} else if in.Type != nil {
			if *in.Type != *other.Type {
				return false
			}
		}
	}

	if in.Address != nil {
		if (in.Address == nil) != (other.Address == nil) {
			return false
		} else if in.Address != nil {
			if *in.Address != *other.Address {
				return false
			}
		}
	}

	if in.Credentials != nil {
		if (in.Credentials == nil) != (other.Credentials == nil) {
			return false
		} else if in.Credentials != nil {
			if !in.Credentials.DeepEqual(other.Credentials) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *BondInfo) DeepEqual(other *BondInfo) bool {
	if other == nil {
		return false
	}

	if !in.CommonInterfaceInfo.DeepEqual(&other.CommonInterfaceInfo) {
		return false
	}

	if ((in.Members != nil) && (other.Members != nil)) || ((in.Members == nil) != (other.Members == nil)) {
		in, other := &in.Members, &other.Members
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement == otherElement {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	if in.Mode != other.Mode {
		return false
	}
	if (in.TransmitHashPolicy == nil) != (other.TransmitHashPolicy == nil) {
		return false
	} else if in.TransmitHashPolicy != nil {
		if *in.TransmitHashPolicy != *other.TransmitHashPolicy {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *BondList) DeepEqual(other *BondList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *CertificateList) DeepEqual(other *CertificateList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *CommonInterfaceInfo) DeepEqual(other *CommonInterfaceInfo) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.Class != other.Class {
		return false
	}
	if in.MTU != nil {
		if (in.MTU == nil) != (other.MTU == nil) {
			return false
		} else if in.MTU != nil {
			if *in.MTU != *other.MTU {
				return false
			}
		}
	}

	if in.PlatformNetworks != nil {
		if (in.PlatformNetworks == nil) != (other.PlatformNetworks == nil) {
			return false
		} else if in.PlatformNetworks != nil {
			if !in.PlatformNetworks.DeepEqual(other.PlatformNetworks) {
				return false
			}
		}
	}

	if in.DataNetworks != nil {
		if (in.DataNetworks == nil) != (other.DataNetworks == nil) {
			return false
		} else if in.DataNetworks != nil {
			if !in.DataNetworks.DeepEqual(other.DataNetworks) {
				return false
			}
		}
	}

	if in.PTPRole != nil {
		if (in.PTPRole == nil) != (other.PTPRole == nil) {
			return false
		} else if in.PTPRole != nil {
			if *in.PTPRole != *other.PTPRole {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ControllerFileSystemInfo) DeepEqual(other *ControllerFileSystemInfo) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.Size != other.Size {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ControllerFileSystemList) DeepEqual(other *ControllerFileSystemList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *DRBDConfiguration) DeepEqual(other *DRBDConfiguration) bool {
	if other == nil {
		return false
	}

	if in.LinkUtilization != other.LinkUtilization {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *DataNetworkSpec) DeepEqual(other *DataNetworkSpec) bool {
	if other == nil {
		return false
	}

	if in.Type != other.Type {
		return false
	}
	if (in.Description == nil) != (other.Description == nil) {
		return false
	} else if in.Description != nil {
		if *in.Description != *other.Description {
			return false
		}
	}

	if (in.MTU == nil) != (other.MTU == nil) {
		return false
	} else if in.MTU != nil {
		if *in.MTU != *other.MTU {
			return false
		}
	}

	if (in.VxLAN == nil) != (other.VxLAN == nil) {
		return false
	} else if in.VxLAN != nil {
		if !in.VxLAN.DeepEqual(other.VxLAN) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *DataNetworkStatus) DeepEqual(other *DataNetworkStatus) bool {
	if other == nil {
		return false
	}

	if (in.ID == nil) != (other.ID == nil) {
		return false
	} else if in.ID != nil {
		if *in.ID != *other.ID {
			return false
		}
	}

	if in.Reconciled != other.Reconciled {
		return false
	}
	if in.InSync != other.InSync {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ErrMissingSystemResource) DeepEqual(other *ErrMissingSystemResource) bool {
	if other == nil {
		return false
	}

	if in.message != other.message {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *EthernetInfo) DeepEqual(other *EthernetInfo) bool {
	if other == nil {
		return false
	}

	if !in.CommonInterfaceInfo.DeepEqual(&other.CommonInterfaceInfo) {
		return false
	}

	if in.VFCount != nil {
		if (in.VFCount == nil) != (other.VFCount == nil) {
			return false
		} else if in.VFCount != nil {
			if *in.VFCount != *other.VFCount {
				return false
			}
		}
	}

	if in.VFDriver != nil {
		if (in.VFDriver == nil) != (other.VFDriver == nil) {
			return false
		} else if in.VFDriver != nil {
			if *in.VFDriver != *other.VFDriver {
				return false
			}
		}
	}

	if in.Port != other.Port {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *EthernetList) DeepEqual(other *EthernetList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *EthernetPortInfo) DeepEqual(other *EthernetPortInfo) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *FileSystemInfo) DeepEqual(other *FileSystemInfo) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.Size != other.Size {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *FileSystemList) DeepEqual(other *FileSystemList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *HostProfileSpec) DeepEqual(other *HostProfileSpec) bool {
	if other == nil {
		return false
	}

	if (in.Base == nil) != (other.Base == nil) {
		return false
	} else if in.Base != nil {
		if *in.Base != *other.Base {
			return false
		}
	}

	if !in.ProfileBaseAttributes.DeepEqual(&other.ProfileBaseAttributes) {
		return false
	}

	if (in.BoardManagement == nil) != (other.BoardManagement == nil) {
		return false
	} else if in.BoardManagement != nil {
		if !in.BoardManagement.DeepEqual(other.BoardManagement) {
			return false
		}
	}

	if ((in.Processors != nil) && (other.Processors != nil)) || ((in.Processors == nil) != (other.Processors == nil)) {
		in, other := &in.Processors, &other.Processors
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement.DeepEqual(&otherElement) {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	if ((in.Memory != nil) && (other.Memory != nil)) || ((in.Memory == nil) != (other.Memory == nil)) {
		in, other := &in.Memory, &other.Memory
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement.DeepEqual(&otherElement) {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	if (in.Storage == nil) != (other.Storage == nil) {
		return false
	} else if in.Storage != nil {
		if !in.Storage.DeepEqual(other.Storage) {
			return false
		}
	}

	if (in.Interfaces == nil) != (other.Interfaces == nil) {
		return false
	} else if in.Interfaces != nil {
		if !in.Interfaces.DeepEqual(other.Interfaces) {
			return false
		}
	}

	if ((in.Addresses != nil) && (other.Addresses != nil)) || ((in.Addresses == nil) != (other.Addresses == nil)) {
		in, other := &in.Addresses, &other.Addresses
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.Routes != nil) && (other.Routes != nil)) || ((in.Routes == nil) != (other.Routes == nil)) {
		in, other := &in.Routes, &other.Routes
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement.DeepEqual(&otherElement) {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *HostSpec) DeepEqual(other *HostSpec) bool {
	if other == nil {
		return false
	}

	if in.Profile != other.Profile {
		return false
	}
	if (in.Match == nil) != (other.Match == nil) {
		return false
	} else if in.Match != nil {
		if !in.Match.DeepEqual(other.Match) {
			return false
		}
	}

	if (in.Overrides == nil) != (other.Overrides == nil) {
		return false
	} else if in.Overrides != nil {
		if !in.Overrides.DeepEqual(other.Overrides) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *HostStatus) DeepEqual(other *HostStatus) bool {
	if other == nil {
		return false
	}

	if (in.ID == nil) != (other.ID == nil) {
		return false
	} else if in.ID != nil {
		if *in.ID != *other.ID {
			return false
		}
	}

	if (in.AdministrativeState == nil) != (other.AdministrativeState == nil) {
		return false
	} else if in.AdministrativeState != nil {
		if *in.AdministrativeState != *other.AdministrativeState {
			return false
		}
	}

	if (in.OperationalStatus == nil) != (other.OperationalStatus == nil) {
		return false
	} else if in.OperationalStatus != nil {
		if *in.OperationalStatus != *other.OperationalStatus {
			return false
		}
	}

	if (in.AvailabilityStatus == nil) != (other.AvailabilityStatus == nil) {
		return false
	} else if in.AvailabilityStatus != nil {
		if *in.AvailabilityStatus != *other.AvailabilityStatus {
			return false
		}
	}

	if in.InSync != other.InSync {
		return false
	}
	if in.Reconciled != other.Reconciled {
		return false
	}
	if (in.Defaults == nil) != (other.Defaults == nil) {
		return false
	} else if in.Defaults != nil {
		if *in.Defaults != *other.Defaults {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *InterfaceInfo) DeepEqual(other *InterfaceInfo) bool {
	if other == nil {
		return false
	}

	if ((in.Ethernet != nil) && (other.Ethernet != nil)) || ((in.Ethernet == nil) != (other.Ethernet == nil)) {
		in, other := &in.Ethernet, &other.Ethernet
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.VLAN != nil) && (other.VLAN != nil)) || ((in.VLAN == nil) != (other.VLAN == nil)) {
		in, other := &in.VLAN, &other.VLAN
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement.DeepEqual(&otherElement) {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	if ((in.Bond != nil) && (other.Bond != nil)) || ((in.Bond == nil) != (other.Bond == nil)) {
		in, other := &in.Bond, &other.Bond
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.VF != nil) && (other.VF != nil)) || ((in.VF == nil) != (other.VF == nil)) {
		in, other := &in.VF, &other.VF
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement.DeepEqual(&otherElement) {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *JournalInfo) DeepEqual(other *JournalInfo) bool {
	if other == nil {
		return false
	}

	if in.Location != other.Location {
		return false
	}
	if in.Size != other.Size {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MatchBMInfo) DeepEqual(other *MatchBMInfo) bool {
	if other == nil {
		return false
	}

	if (in.Address == nil) != (other.Address == nil) {
		return false
	} else if in.Address != nil {
		if *in.Address != *other.Address {
			return false
		}
	}

	if (in.Type == nil) != (other.Type == nil) {
		return false
	} else if in.Type != nil {
		if *in.Type != *other.Type {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MatchDMIInfo) DeepEqual(other *MatchDMIInfo) bool {
	if other == nil {
		return false
	}

	if (in.SerialNumber == nil) != (other.SerialNumber == nil) {
		return false
	} else if in.SerialNumber != nil {
		if *in.SerialNumber != *other.SerialNumber {
			return false
		}
	}

	if (in.AssetTag == nil) != (other.AssetTag == nil) {
		return false
	} else if in.AssetTag != nil {
		if *in.AssetTag != *other.AssetTag {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MatchInfo) DeepEqual(other *MatchInfo) bool {
	if other == nil {
		return false
	}

	if (in.BootMAC == nil) != (other.BootMAC == nil) {
		return false
	} else if in.BootMAC != nil {
		if *in.BootMAC != *other.BootMAC {
			return false
		}
	}

	if (in.BoardManagement == nil) != (other.BoardManagement == nil) {
		return false
	} else if in.BoardManagement != nil {
		if !in.BoardManagement.DeepEqual(other.BoardManagement) {
			return false
		}
	}

	if (in.DMI == nil) != (other.DMI == nil) {
		return false
	} else if in.DMI != nil {
		if !in.DMI.DeepEqual(other.DMI) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MemoryFunctionInfo) DeepEqual(other *MemoryFunctionInfo) bool {
	if other == nil {
		return false
	}

	if in.Function != other.Function {
		return false
	}
	if in.PageSize != other.PageSize {
		return false
	}
	if in.PageCount != other.PageCount {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MemoryFunctionList) DeepEqual(other *MemoryFunctionList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MemoryNodeInfo) DeepEqual(other *MemoryNodeInfo) bool {
	if other == nil {
		return false
	}

	if in.Node != other.Node {
		return false
	}
	if ((in.Functions != nil) && (other.Functions != nil)) || ((in.Functions == nil) != (other.Functions == nil)) {
		in, other := &in.Functions, &other.Functions
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MemoryNodeList) DeepEqual(other *MemoryNodeList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *MonitorInfo) DeepEqual(other *MonitorInfo) bool {
	if other == nil {
		return false
	}

	if in.Size != nil {
		if (in.Size == nil) != (other.Size == nil) {
			return false
		} else if in.Size != nil {
			if *in.Size != *other.Size {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OSDInfo) DeepEqual(other *OSDInfo) bool {
	if other == nil {
		return false
	}

	if in.Function != other.Function {
		return false
	}
	if in.Path != other.Path {
		return false
	}
	if in.ClusterName != nil {
		if (in.ClusterName == nil) != (other.ClusterName == nil) {
			return false
		} else if in.ClusterName != nil {
			if *in.ClusterName != *other.ClusterName {
				return false
			}
		}
	}

	if in.Journal != nil {
		if (in.Journal == nil) != (other.Journal == nil) {
			return false
		} else if in.Journal != nil {
			if !in.Journal.DeepEqual(other.Journal) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OSDList) DeepEqual(other *OSDList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PTPInfo) DeepEqual(other *PTPInfo) bool {
	if other == nil {
		return false
	}

	if in.Mode != nil {
		if (in.Mode == nil) != (other.Mode == nil) {
			return false
		} else if in.Mode != nil {
			if *in.Mode != *other.Mode {
				return false
			}
		}
	}

	if in.Transport != nil {
		if (in.Transport == nil) != (other.Transport == nil) {
			return false
		} else if in.Transport != nil {
			if *in.Transport != *other.Transport {
				return false
			}
		}
	}

	if in.Mechanism != nil {
		if (in.Mechanism == nil) != (other.Mechanism == nil) {
			return false
		} else if in.Mechanism != nil {
			if *in.Mechanism != *other.Mechanism {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PhysicalVolumeInfo) DeepEqual(other *PhysicalVolumeInfo) bool {
	if other == nil {
		return false
	}

	if in.Type != other.Type {
		return false
	}
	if in.Path != other.Path {
		return false
	}
	if in.Size != nil {
		if (in.Size == nil) != (other.Size == nil) {
			return false
		} else if in.Size != nil {
			if *in.Size != *other.Size {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PhysicalVolumeList) DeepEqual(other *PhysicalVolumeList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PlatformNetworkSpec) DeepEqual(other *PlatformNetworkSpec) bool {
	if other == nil {
		return false
	}

	if in.Type != other.Type {
		return false
	}
	if in.Subnet != other.Subnet {
		return false
	}
	if in.Prefix != other.Prefix {
		return false
	}
	if (in.Gateway == nil) != (other.Gateway == nil) {
		return false
	} else if in.Gateway != nil {
		if *in.Gateway != *other.Gateway {
			return false
		}
	}

	if !in.Allocation.DeepEqual(&other.Allocation) {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PlatformNetworkStatus) DeepEqual(other *PlatformNetworkStatus) bool {
	if other == nil {
		return false
	}

	if (in.ID == nil) != (other.ID == nil) {
		return false
	} else if in.ID != nil {
		if *in.ID != *other.ID {
			return false
		}
	}

	if (in.PoolUUID == nil) != (other.PoolUUID == nil) {
		return false
	} else if in.PoolUUID != nil {
		if *in.PoolUUID != *other.PoolUUID {
			return false
		}
	}

	if in.Reconciled != other.Reconciled {
		return false
	}
	if in.InSync != other.InSync {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProcessorFunctionInfo) DeepEqual(other *ProcessorFunctionInfo) bool {
	if other == nil {
		return false
	}

	if in.Function != other.Function {
		return false
	}
	if in.Count != other.Count {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProcessorFunctionList) DeepEqual(other *ProcessorFunctionList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProcessorInfo) DeepEqual(other *ProcessorInfo) bool {
	if other == nil {
		return false
	}

	if in.Node != other.Node {
		return false
	}
	if ((in.Functions != nil) && (other.Functions != nil)) || ((in.Functions == nil) != (other.Functions == nil)) {
		in, other := &in.Functions, &other.Functions
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProcessorNodeList) DeepEqual(other *ProcessorNodeList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProfileBaseAttributes) DeepEqual(other *ProfileBaseAttributes) bool {
	if other == nil {
		return false
	}

	if in.Personality != nil {
		if (in.Personality == nil) != (other.Personality == nil) {
			return false
		} else if in.Personality != nil {
			if *in.Personality != *other.Personality {
				return false
			}
		}
	}

	if in.AdministrativeState != nil {
		if (in.AdministrativeState == nil) != (other.AdministrativeState == nil) {
			return false
		} else if in.AdministrativeState != nil {
			if *in.AdministrativeState != *other.AdministrativeState {
				return false
			}
		}
	}

	if ((in.SubFunctions != nil) && (other.SubFunctions != nil)) || ((in.SubFunctions == nil) != (other.SubFunctions == nil)) {
		in, other := &in.SubFunctions, &other.SubFunctions
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for _, inElement := range *in {
				found := false
				for _, otherElement := range *other {
					if inElement == otherElement {
						found = true
						break
					}
				}
				if !found {
					return false
				}
			}
		}
	}

	if in.Location != nil {
		if (in.Location == nil) != (other.Location == nil) {
			return false
		} else if in.Location != nil {
			if *in.Location != *other.Location {
				return false
			}
		}
	}

	if ((in.Labels != nil) && (other.Labels != nil)) || ((in.Labels == nil) != (other.Labels == nil)) {
		in, other := &in.Labels, &other.Labels
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	if in.InstallOutput != nil {
		if (in.InstallOutput == nil) != (other.InstallOutput == nil) {
			return false
		} else if in.InstallOutput != nil {
			if *in.InstallOutput != *other.InstallOutput {
				return false
			}
		}
	}

	if in.Console != nil {
		if (in.Console == nil) != (other.Console == nil) {
			return false
		} else if in.Console != nil {
			if *in.Console != *other.Console {
				return false
			}
		}
	}

	if in.BootDevice != nil {
		if (in.BootDevice == nil) != (other.BootDevice == nil) {
			return false
		} else if in.BootDevice != nil {
			if *in.BootDevice != *other.BootDevice {
				return false
			}
		}
	}

	if in.PowerOn != nil {
		if (in.PowerOn == nil) != (other.PowerOn == nil) {
			return false
		} else if in.PowerOn != nil {
			if *in.PowerOn != *other.PowerOn {
				return false
			}
		}
	}

	if in.ProvisioningMode != nil {
		if (in.ProvisioningMode == nil) != (other.ProvisioningMode == nil) {
			return false
		} else if in.ProvisioningMode != nil {
			if *in.ProvisioningMode != *other.ProvisioningMode {
				return false
			}
		}
	}

	if in.BootMAC != nil {
		if (in.BootMAC == nil) != (other.BootMAC == nil) {
			return false
		} else if in.BootMAC != nil {
			if *in.BootMAC != *other.BootMAC {
				return false
			}
		}
	}

	if in.RootDevice != nil {
		if (in.RootDevice == nil) != (other.RootDevice == nil) {
			return false
		} else if in.RootDevice != nil {
			if *in.RootDevice != *other.RootDevice {
				return false
			}
		}
	}

	if in.ClockSynchronization != nil {
		if (in.ClockSynchronization == nil) != (other.ClockSynchronization == nil) {
			return false
		} else if in.ClockSynchronization != nil {
			if *in.ClockSynchronization != *other.ClockSynchronization {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ProfileStorageInfo) DeepEqual(other *ProfileStorageInfo) bool {
	if other == nil {
		return false
	}

	if in.Monitor != nil {
		if (in.Monitor == nil) != (other.Monitor == nil) {
			return false
		} else if in.Monitor != nil {
			if !in.Monitor.DeepEqual(other.Monitor) {
				return false
			}
		}
	}

	if in.OSDs != nil {
		if (in.OSDs == nil) != (other.OSDs == nil) {
			return false
		} else if in.OSDs != nil {
			if !in.OSDs.DeepEqual(other.OSDs) {
				return false
			}
		}
	}

	if in.VolumeGroups != nil {
		if (in.VolumeGroups == nil) != (other.VolumeGroups == nil) {
			return false
		} else if in.VolumeGroups != nil {
			if !in.VolumeGroups.DeepEqual(other.VolumeGroups) {
				return false
			}
		}
	}

	if in.FileSystems != nil {
		if (in.FileSystems == nil) != (other.FileSystems == nil) {
			return false
		} else if in.FileSystems != nil {
			if !in.FileSystems.DeepEqual(other.FileSystems) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *RouteInfo) DeepEqual(other *RouteInfo) bool {
	if other == nil {
		return false
	}

	if in.Interface != other.Interface {
		return false
	}
	if in.Network != other.Network {
		return false
	}
	if in.Prefix != other.Prefix {
		return false
	}
	if in.Gateway != other.Gateway {
		return false
	}
	if in.Metric != nil {
		if (in.Metric == nil) != (other.Metric == nil) {
			return false
		} else if in.Metric != nil {
			if *in.Metric != *other.Metric {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *RouteList) DeepEqual(other *RouteList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SNMPInfo) DeepEqual(other *SNMPInfo) bool {
	if other == nil {
		return false
	}

	if in.Communities != nil {
		if (in.Communities == nil) != (other.Communities == nil) {
			return false
		} else if in.Communities != nil {
			if !in.Communities.DeepEqual(other.Communities) {
				return false
			}
		}
	}

	if in.TrapDestinations != nil {
		if (in.TrapDestinations == nil) != (other.TrapDestinations == nil) {
			return false
		} else if in.TrapDestinations != nil {
			if !in.TrapDestinations.DeepEqual(other.TrapDestinations) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ServiceParameterInfo) DeepEqual(other *ServiceParameterInfo) bool {
	if other == nil {
		return false
	}

	if in.Service != other.Service {
		return false
	}
	if in.Section != other.Section {
		return false
	}
	if in.ParamName != other.ParamName {
		return false
	}
	if in.ParamValue != other.ParamValue {
		return false
	}
	if (in.Personality == nil) != (other.Personality == nil) {
		return false
	} else if in.Personality != nil {
		if *in.Personality != *other.Personality {
			return false
		}
	}

	if (in.Resource == nil) != (other.Resource == nil) {
		return false
	} else if in.Resource != nil {
		if *in.Resource != *other.Resource {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ServiceParameterList) DeepEqual(other *ServiceParameterList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *StorageBackend) DeepEqual(other *StorageBackend) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.Type != other.Type {
		return false
	}
	if ((in.Services != nil) && (other.Services != nil)) || ((in.Services == nil) != (other.Services == nil)) {
		in, other := &in.Services, &other.Services
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if in.ReplicationFactor != nil {
		if (in.ReplicationFactor == nil) != (other.ReplicationFactor == nil) {
			return false
		} else if in.ReplicationFactor != nil {
			if *in.ReplicationFactor != *other.ReplicationFactor {
				return false
			}
		}
	}

	if in.PartitionSize != nil {
		if (in.PartitionSize == nil) != (other.PartitionSize == nil) {
			return false
		} else if in.PartitionSize != nil {
			if *in.PartitionSize != *other.PartitionSize {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *StorageBackendList) DeepEqual(other *StorageBackendList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *StringList) DeepEqual(other *StringList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement == otherElement {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SystemSpec) DeepEqual(other *SystemSpec) bool {
	if other == nil {
		return false
	}

	if in.Description != nil {
		if (in.Description == nil) != (other.Description == nil) {
			return false
		} else if in.Description != nil {
			if *in.Description != *other.Description {
				return false
			}
		}
	}

	if in.Location != nil {
		if (in.Location == nil) != (other.Location == nil) {
			return false
		} else if in.Location != nil {
			if *in.Location != *other.Location {
				return false
			}
		}
	}

	if in.Contact != nil {
		if (in.Contact == nil) != (other.Contact == nil) {
			return false
		} else if in.Contact != nil {
			if *in.Contact != *other.Contact {
				return false
			}
		}
	}

	if in.DNSServers != nil {
		if (in.DNSServers == nil) != (other.DNSServers == nil) {
			return false
		} else if in.DNSServers != nil {
			if !in.DNSServers.DeepEqual(other.DNSServers) {
				return false
			}
		}
	}

	if in.NTPServers != nil {
		if (in.NTPServers == nil) != (other.NTPServers == nil) {
			return false
		} else if in.NTPServers != nil {
			if !in.NTPServers.DeepEqual(other.NTPServers) {
				return false
			}
		}
	}

	if in.PTP != nil {
		if (in.PTP == nil) != (other.PTP == nil) {
			return false
		} else if in.PTP != nil {
			if !in.PTP.DeepEqual(other.PTP) {
				return false
			}
		}
	}

	if in.Certificates != nil {
		if (in.Certificates == nil) != (other.Certificates == nil) {
			return false
		} else if in.Certificates != nil {
			if !in.Certificates.DeepEqual(other.Certificates) {
				return false
			}
		}
	}

	if in.License != nil {
		if (in.License == nil) != (other.License == nil) {
			return false
		} else if in.License != nil {
			if !in.License.DeepEqual(other.License) {
				return false
			}
		}
	}

	if in.ServiceParameters != nil {
		if (in.ServiceParameters == nil) != (other.ServiceParameters == nil) {
			return false
		} else if in.ServiceParameters != nil {
			if !in.ServiceParameters.DeepEqual(other.ServiceParameters) {
				return false
			}
		}
	}

	if in.Storage != nil {
		if (in.Storage == nil) != (other.Storage == nil) {
			return false
		} else if in.Storage != nil {
			if !in.Storage.DeepEqual(other.Storage) {
				return false
			}
		}
	}

	if in.SNMP != nil {
		if (in.SNMP == nil) != (other.SNMP == nil) {
			return false
		} else if in.SNMP != nil {
			if !in.SNMP.DeepEqual(other.SNMP) {
				return false
			}
		}
	}

	if in.VSwitchType != nil {
		if (in.VSwitchType == nil) != (other.VSwitchType == nil) {
			return false
		} else if in.VSwitchType != nil {
			if *in.VSwitchType != *other.VSwitchType {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SystemStatus) DeepEqual(other *SystemStatus) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.SystemType != other.SystemType {
		return false
	}
	if in.SystemMode != other.SystemMode {
		return false
	}
	if in.SoftwareVersion != other.SoftwareVersion {
		return false
	}
	if in.InSync != other.InSync {
		return false
	}
	if in.Reconciled != other.Reconciled {
		return false
	}
	if (in.Defaults == nil) != (other.Defaults == nil) {
		return false
	} else if in.Defaults != nil {
		if *in.Defaults != *other.Defaults {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SystemStorageInfo) DeepEqual(other *SystemStorageInfo) bool {
	if other == nil {
		return false
	}

	if in.Backends != nil {
		if (in.Backends == nil) != (other.Backends == nil) {
			return false
		} else if in.Backends != nil {
			if !in.Backends.DeepEqual(other.Backends) {
				return false
			}
		}
	}

	if in.DRBD != nil {
		if (in.DRBD == nil) != (other.DRBD == nil) {
			return false
		} else if in.DRBD != nil {
			if !in.DRBD.DeepEqual(other.DRBD) {
				return false
			}
		}
	}

	if in.FileSystems != nil {
		if (in.FileSystems == nil) != (other.FileSystems == nil) {
			return false
		} else if in.FileSystems != nil {
			if !in.FileSystems.DeepEqual(other.FileSystems) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *TrapDestInfo) DeepEqual(other *TrapDestInfo) bool {
	if other == nil {
		return false
	}

	if in.Community != other.Community {
		return false
	}
	if in.IPAddress != other.IPAddress {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *TrapDestList) DeepEqual(other *TrapDestList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VFInfo) DeepEqual(other *VFInfo) bool {
	if other == nil {
		return false
	}

	if !in.CommonInterfaceInfo.DeepEqual(&other.CommonInterfaceInfo) {
		return false
	}

	if in.Lower != other.Lower {
		return false
	}
	if in.VFCount != other.VFCount {
		return false
	}
	if (in.VFDriver == nil) != (other.VFDriver == nil) {
		return false
	} else if in.VFDriver != nil {
		if *in.VFDriver != *other.VFDriver {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VFList) DeepEqual(other *VFList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VLANInfo) DeepEqual(other *VLANInfo) bool {
	if other == nil {
		return false
	}

	if !in.CommonInterfaceInfo.DeepEqual(&other.CommonInterfaceInfo) {
		return false
	}

	if in.Lower != other.Lower {
		return false
	}
	if in.VID != other.VID {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VLANList) DeepEqual(other *VLANList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VolumeGroupInfo) DeepEqual(other *VolumeGroupInfo) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.ConcurrentDiskOperations != nil {
		if (in.ConcurrentDiskOperations == nil) != (other.ConcurrentDiskOperations == nil) {
			return false
		} else if in.ConcurrentDiskOperations != nil {
			if *in.ConcurrentDiskOperations != *other.ConcurrentDiskOperations {
				return false
			}
		}
	}

	if in.LVMType != nil {
		if (in.LVMType == nil) != (other.LVMType == nil) {
			return false
		} else if in.LVMType != nil {
			if *in.LVMType != *other.LVMType {
				return false
			}
		}
	}

	if ((in.PhysicalVolumes != nil) && (other.PhysicalVolumes != nil)) || ((in.PhysicalVolumes == nil) != (other.PhysicalVolumes == nil)) {
		in, other := &in.PhysicalVolumes, &other.PhysicalVolumes
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VolumeGroupList) DeepEqual(other *VolumeGroupList) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for _, inElement := range *in {
			found := false
			for _, otherElement := range *other {
				if inElement.DeepEqual(&otherElement) {
					found = true
					break
				}
			}
			if !found {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VxLANInfo) DeepEqual(other *VxLANInfo) bool {
	if other == nil {
		return false
	}

	if (in.MulticastGroup == nil) != (other.MulticastGroup == nil) {
		return false
	} else if in.MulticastGroup != nil {
		if *in.MulticastGroup != *other.MulticastGroup {
			return false
		}
	}

	if (in.UDPPortNumber == nil) != (other.UDPPortNumber == nil) {
		return false
	} else if in.UDPPortNumber != nil {
		if *in.UDPPortNumber != *other.UDPPortNumber {
			return false
		}
	}

	if (in.TTL == nil) != (other.TTL == nil) {
		return false
	} else if in.TTL != nil {
		if *in.TTL != *other.TTL {
			return false
		}
	}

	if (in.EndpointMode == nil) != (other.EndpointMode == nil) {
		return false
	} else if in.EndpointMode != nil {
		if *in.EndpointMode != *other.EndpointMode {
			return false
		}
	}

	return true
}
