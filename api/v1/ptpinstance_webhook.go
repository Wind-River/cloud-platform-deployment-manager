/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright(c) 2022 Wind River Systems, Inc. */

package v1

import (
	"errors"
	"fmt"
	"strings"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// Webhook response reasons
const PtpInstanceAllowedReason string = "allowed to be admitted"

// log is for logging in this package.
var ptpinstancelog = logf.Log.WithName("ptpinstance-resource")

func (r *PtpInstance) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// +kubebuilder:webhook:path=/mutate-starlingx-windriver-com-v1-ptpinstance,mutating=true,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=ptpinstances,verbs=create;update,versions=v1,name=mptpinstance.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

var _ webhook.Defaulter = &PtpInstance{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *PtpInstance) Default() {
	ptpinstancelog.Info("default", "name", r.Name)

	// TODO(user): fill in your defaulting logic.
}

// Validates an incoming resource update/create request.  The intent of this validation is to perform only the
// minimum amount of validation which should normally be done by the CRD validation schema, but until kubebuilder
// supports the necessary validation annotations we need to do this in a webhook.  All other validation is left
// to the system API and any errors generated by that API will be reported in the resource status and events.
func (r *PtpInstance) validatePtpInstance() error {
	present := make(map[string]bool)
	for _, parameter := range r.Spec.InstanceParameters {

		//TODO check if '=' exists, and only one, not the first character
		delim := "="
		if strings.Count(parameter, delim) != 1 || parameter[0:1] == delim {
			msg := fmt.Sprintf("Invalid parameter %s. Parameters must come in the form <parameterKey>=<parameterValue>.",
				parameter)
			return errors.New(msg)
		}
		key := strings.TrimSpace(strings.Split(parameter, delim)[0])

		if _, ok := present[key]; ok {
			msg := fmt.Sprintf("duplicate parameter keys are not allowed for %s.",
				parameter)
			return errors.New(msg)
		}
		present[key] = true
	}

	ptpinstancelog.Info(PtpInstanceAllowedReason)
	return nil
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
// +kubebuilder:webhook:verbs=create;update,path=/validate-starlingx-windriver-com-v1-ptpinstance,mutating=false,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=ptpinstances,versions=v1,name=vptpinstance.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

var _ webhook.Validator = &PtpInstance{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *PtpInstance) ValidateCreate() error {
	ptpinstancelog.Info("validate create", "name", r.Name)

	// TODO(user): fill in your validation logic upon object creation.
	return r.validatePtpInstance()
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *PtpInstance) ValidateUpdate(old runtime.Object) error {
	ptpinstancelog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return r.validatePtpInstance()
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *PtpInstance) ValidateDelete() error {
	ptpinstancelog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
