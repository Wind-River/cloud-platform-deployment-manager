/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	"errors"

	"github.com/wind-river/cloud-platform-deployment-manager/common"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// Webhook response reasons
const PlatformNetworkAllowedReason string = "allowed to be admitted"

const (
	// Maximum IP address prefix lengths
	MaxIPv4PrefixLength int = 32
	MaxIPv6PrefixLength int = 128
)

// log is for logging in this package.
var platformnetworklog = logf.Log.WithName("platformnetwork-resource")

func (r *PlatformNetwork) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// +kubebuilder:webhook:path=/mutate-starlingx-windriver-com-v1-platformnetwork,mutating=true,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=platformnetworks,verbs=create;update,versions=v1,name=mplatformnetwork.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &PlatformNetwork{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *PlatformNetwork) Default() {
	platformnetworklog.Info("default", "name", r.Name)

	// TODO(user): fill in your defaulting logic.
}

// Determines if a string is a valid IP address
func IsIPAddress(value string) bool {
	return common.IsIPv4(value) || common.IsIPv6(value)
}

// Determines if the a prefix length agrees with the address family of the specified address
func IsValidPrefix(address string, prefix int) bool {
	if common.IsIPv4(address) {
		if prefix <= MaxIPv4PrefixLength {
			return true
		}
	} else if common.IsIPv6(address) {
		if prefix <= MaxIPv6PrefixLength {
			return true
		}
	}
	return false
}

// Validates an incoming resource update/create request.  The intent of this validation is to perform only the
// minimum amount of validation which should normally be done by the CRD validation schema, but until kubebuilder
// supports the necessary validation annotations we need to do this in a webhook.  All other validation is left
// to the system API and any errors generated by that API will be reported in the resource status and events.
// Validates that all address specifications within the network are of the same address family.
func (r *PlatformNetwork) validatePlatformNetwork() error {
	if !IsIPAddress(r.Spec.Subnet) {
		return errors.New("expecting a valid IPv4 or IPv6 address in subnet")
	}

	if !IsValidPrefix(r.Spec.Subnet, r.Spec.Prefix) {
		return errors.New("prefix value must correspond to the subnet address family")
	}

	for _, ra := range r.Spec.Allocation.Ranges {
		if !IsIPAddress(ra.Start) || !IsIPAddress(ra.End) {
			return errors.New("start and end addresses must be valid IP addresses")
		}

		if common.IsIPv4(ra.Start) != common.IsIPv4(ra.End) {
			return errors.New("start and end addresses must be of the same address family")
		}

		if common.IsIPv4(ra.Start) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("allocation range address must be of the same family as the network subnet.")
		}
	}
	platformnetworklog.Info(PlatformNetworkAllowedReason)
	return nil
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
// +kubebuilder:webhook:verbs=create;update,path=/validate-starlingx-windriver-com-v1-platformnetwork,mutating=false,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=platformnetworks,versions=v1,name=vplatformnetwork.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &PlatformNetwork{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *PlatformNetwork) ValidateCreate() error {
	platformnetworklog.Info("validate create", "name", r.Name)

	// TODO(user): fill in your validation logic upon object creation.
	return r.validatePlatformNetwork()
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *PlatformNetwork) ValidateUpdate(old runtime.Object) error {
	platformnetworklog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return r.validatePlatformNetwork()
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *PlatformNetwork) ValidateDelete() error {
	platformnetworklog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
