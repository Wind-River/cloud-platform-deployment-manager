/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright(c) 2024 Wind River Systems, Inc. */

package v1

import (
	"errors"

	"github.com/wind-river/cloud-platform-deployment-manager/common"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// Webhook response reasons
const AddressPoolAllowedReason string = "allowed to be admitted"

const (
	// Maximum IP address prefix lengths
	MaxIPv4PrefixLength int = 32
	MaxIPv6PrefixLength int = 128
)

// log is for logging in this package.
var addresspoollog = logf.Log.WithName("addresspool-resource")

func (r *AddressPool) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// +kubebuilder:webhook:path=/mutate-starlingx-windriver-com-v1-addresspool,mutating=true,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=addresspools,verbs=create;update,versions=v1,name=maddresspool.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

var _ webhook.Defaulter = &AddressPool{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *AddressPool) Default() {
	addresspoollog.Info("default", "name", r.Name)

	// TODO(user): fill in your defaulting logic.
}

// Determines if a string is a valid IP address
func IsIPAddress(value string) bool {
	return common.IsIPv4(value) || common.IsIPv6(value)
}

// Determines if the a prefix length agrees with the address family of the specified address
func IsValidPrefix(address string, prefix int) bool {
	if common.IsIPv4(address) {
		if prefix <= MaxIPv4PrefixLength {
			return true
		}
	} else if common.IsIPv6(address) {
		if prefix <= MaxIPv6PrefixLength {
			return true
		}
	}
	return false
}

// Validates an incoming resource update/create request.  The intent of this validation is to perform only the
// minimum amount of validation which should normally be done by the CRD validation schema, but until kubebuilder
// supports the necessary validation annotations we need to do this in a webhook.  All other validation is left
// to the system API and any errors generated by that API will be reported in the resource status and events.
// Validates that all address specifications within the network are of the same address family.
func (r *AddressPool) validateAddressPool() error {
	if !IsIPAddress(r.Spec.Subnet) {
		return errors.New("expecting a valid IPv4 or IPv6 address in subnet")
	}

	if r.Spec.FloatingAddress != nil {
		if !IsIPAddress(*r.Spec.FloatingAddress) {
			return errors.New("expecting a valid IPv4 or IPv6 floatingAddress")
		}
		if common.IsIPv4(*r.Spec.FloatingAddress) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("floatingAddress must be of the same family as the network subnet.")
		}
	}

	if r.Spec.Controller0Address != nil {
		if !IsIPAddress(*r.Spec.Controller0Address) {
			return errors.New("expecting a valid IPv4 or IPv6 controller0Address")
		}
		if common.IsIPv4(*r.Spec.Controller0Address) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("controller0Address must be of the same family as the network subnet.")
		}
	}

	if r.Spec.Controller1Address != nil {
		if !IsIPAddress(*r.Spec.Controller1Address) {
			return errors.New("expecting a valid IPv4 or IPv6 controller1Address")
		}
		if common.IsIPv4(*r.Spec.Controller1Address) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("controller1Address must be of the same family as the network subnet.")
		}
	}

	if r.Spec.Gateway != nil {
		if !IsIPAddress(*r.Spec.Gateway) {
			return errors.New("expecting a valid IPv4 or IPv6 gateway")
		}
		if common.IsIPv4(*r.Spec.Gateway) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("controller1Address must be of the same family as the network subnet.")
		}
	}

	if !IsValidPrefix(r.Spec.Subnet, r.Spec.Prefix) {
		return errors.New("prefix value must correspond to the subnet address family")
	}

	for _, ra := range r.Spec.Allocation.Ranges {
		if !IsIPAddress(ra.Start) || !IsIPAddress(ra.End) {
			return errors.New("start and end addresses must be valid IP addresses")
		}

		if common.IsIPv4(ra.Start) != common.IsIPv4(ra.End) {
			return errors.New("start and end addresses must be of the same address family")
		}

		if common.IsIPv4(ra.Start) != common.IsIPv4(r.Spec.Subnet) {
			return errors.New("allocation range address must be of the same family as the network subnet.")
		}
	}

	addresspoollog.Info(AddressPoolAllowedReason)
	return nil
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
// +kubebuilder:webhook:verbs=create;update,path=/validate-starlingx-windriver-com-v1-addresspool,mutating=false,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=addresspools,versions=v1,name=vaddresspool.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

var _ webhook.Validator = &AddressPool{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *AddressPool) ValidateCreate() error {
	addresspoollog.Info("validate create", "name", r.Name)

	// TODO(user): fill in your validation logic upon object creation.
	return r.validateAddressPool()
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *AddressPool) ValidateUpdate(old runtime.Object) error {
	addresspoollog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return r.validateAddressPool()
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *AddressPool) ValidateDelete() error {
	addresspoollog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
