/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright(c) 2022, 2024-2025 Wind River Systems, Inc. */

package v1

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// Webhook response reasons
const PtpInterfaceAllowedReason string = "allowed to be admitted"

// log is for logging in this package.
var ptpinterfacelog = logf.Log.WithName("ptpinterface-resource")

func (r *PtpInterface) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		WithDefaulter(&PtpInterfaceCustomDefaulter{}).
		WithValidator(&PtpInterfaceCustomValidator{}).
		Complete()
}

// +kubebuilder:webhook:path=/mutate-starlingx-windriver-com-v1-ptpinterface,mutating=true,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=ptpinterfaces,verbs=create;update,versions=v1,name=mptpinterface.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

type PtpInterfaceCustomDefaulter struct{}

var _ webhook.CustomDefaulter = &PtpInterfaceCustomDefaulter{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (d *PtpInterfaceCustomDefaulter) Default(ctx context.Context, obj runtime.Object) error {
	ptpInterface, ok := obj.(*PtpInterface)
	if !ok {
		return fmt.Errorf("expected a PtpInterface object but got %T", obj)
	}
	ptpinterfacelog.Info("default", "name", ptpInterface.Name)
	return nil
}

// Validates an incoming resource update/create request.  The intent of this validation is to perform only the
// minimum amount of validation which should normally be done by the CRD validation schema, but until kubebuilder
// supports the necessary validation annotations we need to do this in a webhook.  All other validation is left
// to the system API and any errors generated by that API will be reported in the resource status and events.
func (r *PtpInterface) validatePtpInterface() error {
	present := make(map[string]bool)
	delim := "="
	for _, parameter := range r.Spec.InterfaceParameters {

		if strings.Count(parameter, delim) != 1 || parameter[0:1] == delim {
			msg := fmt.Sprintf("Invalid parameter %s. Parameters must come in the form <parameterKey>=<parameterValue>.",
				parameter)
			return errors.New(msg)
		}

		key := strings.TrimSpace(strings.Split(parameter, delim)[0])

		if _, ok := present[key]; ok {
			msg := fmt.Sprintf("duplicate parameter keys are not allowed for %s.",
				parameter)
			return errors.New(msg)
		}
		present[key] = true

	}

	ptpinterfacelog.Info(PtpInterfaceAllowedReason)
	return nil
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
// +kubebuilder:webhook:verbs=create;update,path=/validate-starlingx-windriver-com-v1-ptpinterface,mutating=false,failurePolicy=fail,sideEffects=None,groups=starlingx.windriver.com,resources=ptpinterfaces,versions=v1,name=vptpinterface.kb.io,admissionReviewVersions=v1,timeoutSeconds=30

type PtpInterfaceCustomValidator struct{}

var _ webhook.CustomValidator = &PtpInterfaceCustomValidator{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (v *PtpInterfaceCustomValidator) ValidateCreate(ctx context.Context, obj runtime.Object) (admission.Warnings, error) {
	ptpInterface, ok := obj.(*PtpInterface)
	if !ok {
		return nil, fmt.Errorf("expected a PtpInterface object but got %T", obj)
	}
	ptpinterfacelog.Info("validate create", "name", ptpInterface.Name)
	return nil, ptpInterface.validatePtpInterface()
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (d *PtpInterfaceCustomValidator) ValidateUpdate(cxt context.Context, oldObj, newObj runtime.Object) (admission.Warnings, error) {
	ptpInterface, ok := newObj.(*PtpInterface)
	if !ok {
		return nil, fmt.Errorf("expected a PtpInterface object but got %T", newObj)
	}
	ptpinterfacelog.Info("validate update", "name", ptpInterface.Name)
	return nil, ptpInterface.validatePtpInterface()
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (d *PtpInterfaceCustomValidator) ValidateDelete(cxt context.Context, obj runtime.Object) (admission.Warnings, error) {
	ptpInterface, ok := obj.(*PtpInterface)
	if !ok {
		return nil, fmt.Errorf("expected a PtpInteface object but got %T", obj)
	}
	ptpinterfacelog.Info("validate delete", "name", ptpInterface.Name)
	return nil, nil
}
